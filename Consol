cd /home/ubuntu/1326005-git-initial-commit

git config user.name "Hacker Developer"
git config user.email "hacker.developer@hackercompany.com"

git add .

git commit -m "Initial implementation"

git push



// Replace with your actual service account or credential ID
def targetString = 'svc_devops_user@company.com'

// Get all jobs in Jenkins
def allJobs = Jenkins.instance.getAllItems(org.jenkinsci.plugins.workflow.job.WorkflowJob)

def matchedJobs = []

allJobs.each { job ->
    try {
        def defn = job.definition
        if (defn != null) {
            def script = defn.script
            if (script?.contains(targetString)) {
                matchedJobs << job.fullName
            }
        }
    } catch (Exception e) {
        println "Error while checking job: ${job.fullName}, reason: ${e.message}"
    }
}

// Output matched jobs
if (matchedJobs) {
    println "Jobs using service account '${targetString}':"
    matchedJobs.each { println "- ${it}" }
} else {
    println "No jobs found using service account '${targetString}'."
}




import org.jenkinsci.plugins.workflow.job.WorkflowJob
import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject

def targetString = 'svc_devops_user@company.com'
def matchedJobs = []

Jenkins.instance.getAllItems().each { item ->
    try {
        if (item instanceof WorkflowJob) {
            def job = item
            def defn = job.definition
            if (defn != null && defn.hasProperty('script')) {
                def script = defn.script
                if (script?.contains(targetString)) {
                    matchedJobs << job.fullName
                }
            } else {
                println "🔍 Skipped '${job.fullName}' — Script not available (SCM based)"
            }
        }
    } catch (Exception e) {
        println "❌ Error while scanning ${item.fullName}: ${e.message}"
    }
}

if (matchedJobs) {
    println "\n✅ Jobs using '${targetString}':"
    matchedJobs.each { println "- ${it}" }
} else {
    println "\n⚠️ No jobs found using '${targetString}'."
}
